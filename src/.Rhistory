get_param_sample <- function(n, data) {
n_mean = mean(data)
n_sd = sd(data)
rnorm(n, n_mean, n_sd)
}
# Draws a nonparametric sample
get_nparam_sample <- function(n, data) {
sample(data, n, replace=TRUE)
}
do_bootstrap <- function(data, get_sample) {
b_data <- replicate(2000, get_sample(2000, data))
print(str(b_data))
b_row_means <- rowMeans(b_data)
b_mean <- mean(b_row_means)
b_bias <- b_mean - mean(data)
b_se <- sd(b_row_means)
b_ci <- quantile(b_row_means, c(0.025, 0.975))
b_corrected_mean <- mean(b_data) - b_bias
b_corrected_trimmed_mean <- mean(b_data, trim=0.05) - b_bias
cat("bias = ", b_bias, "\n")
cat("standard error = ", b_se, "\n")
cat("2.5% and 97.5% confidence intervall = ", b_ci, "\n")
cat("corrected mean = ", b_corrected_mean, "\n")
cat("corrected trimmed mean = ", b_corrected_trimmed_mean, "\n\n")
}
# Bootstrap x
print("Parametric x")
set.seed(1234)
do_bootstrap(x, get_param_sample)
print("Parametric x.clean")
set.seed(1234)
do_bootstrap(x.clean, get_param_sample)
print("Nonparametric x")
set.seed(1234)
do_bootstrap(x, get_nparam_sample)
print("Nonparametric x.clean")
set.seed(1234)
do_bootstrap(x.clean, get_nparam_sample)
set.seed(1234)
bootstrap.x <- t(replicate(200, sample(rnorm(2000, mean(x), sd(x)))))
print(str(bootstrap.x))
set.seed(1234)
bootstrap.x.clean <- t(replicate(200, sample(rnorm(1960, mean(x.clean), sd(x.clean)))))
# mean
bootstrap.x$mean <- rowMeans(bootstrap.x)
bootstrap.x.clean$mean <- rowMeans(bootstrap.x.clean)
# Bias
bias.x <- mean(bootstrap.x$mean) - mean(x)
bias.x.clean <- mean(bootstrap.x.clean$mean) - mean(x.clean)
cat("\nBias for x = ", bias.x, "\n")
cat("Bias for x.clean = ", bias.x.clean, "\n")
# Standard Error
cat("Standard Error for x = ", sd(bootstrap.x$mean), "\n")
cat("Standard Error for x.clean = ", sd(bootstrap.x.clean$mean), "\n")
# 95% CI
cat("95% CI for x = ", quantile(bootstrap.x$mean, c(0.025, 0.975)), "\n")
cat("95% CI for x.clean = ", quantile(bootstrap.x.clean$mean, c(0.025, 0.975)), "\n")
# bias corrected estimate
# non-trimmed
cat("Non-trimmed bias corrected estimate\n")
cat("x = ", mean(bootstrap.x) - bias.x, "\n")
cat("x.clean = ", mean(bootstrap.x.clean) - bias.x.clean, "\n")
# trimmed
cat("Trimmed bias corrected estimate\n")
cat("x = ", mean(bootstrap.x, trim = 0.05) - bias.x, "\n")
cat("x.clean = ", mean(bootstrap.x.clean, trim = 0.05) - bias.x.clean, "\n")
set.seed(1234)
bootstrap.x <- t(replicate(200, sample(x, replace=TRUE)))
set.seed(1234)
bootstrap.x.clean <- t(replicate(200, sample(x.clean, replace=TRUE)))
# mean
bootstrap.x$mean <- rowMeans(bootstrap.x)
bootstrap.x.clean$mean <- rowMeans(bootstrap.x.clean)
# Bias
bias.x <- mean(bootstrap.x$mean) - mean(x)
bias.x.clean <- mean(bootstrap.x.clean$mean) - mean(x.clean)
cat("\nBias for x = ", bias.x, "\n")
cat("Bias for x.clean = ", bias.x.clean, "\n")
# Standard Error
cat("Standard Error for x = ", sd(bootstrap.x$mean), "\n")
cat("Standard Error for x.clean = ", sd(bootstrap.x.clean$mean), "\n")
# 95% CI
cat("95% CI for x = ", quantile(bootstrap.x$mean, c(0.025, 0.975)), "\n")
cat("95% CI for x.clean = ", quantile(bootstrap.x.clean$mean, c(0.025, 0.975)), "\n")
# bias corrected estimate
# non-trimmed
cat("Non-trimmed bias corrected estimate\n")
print(str(bootstrap.x))
cat("x = ", mean(bootstrap.x) - bias.x, "\n")
cat("x.clean = ", mean(bootstrap.x.clean) - bias.x.clean, "\n")
# trimmed
cat("Trimmed bias corrected estimate\n")
cat("x = ", mean(bootstrap.x, trim = 0.05) - bias.x, "\n")
cat("x.clean = ", mean(bootstrap.x.clean, trim = 0.05) - bias.x.clean, "\n")
set.seed(1234)
bootstrap.x <- t(replicate(200, sample(x, replace=TRUE)))
set.seed(1234)
bootstrap.x.clean <- t(replicate(200, sample(x.clean, replace=TRUE)))
# mean
bootstrap.x$mean <- rowMeans(bootstrap.x)
bootstrap.x.clean$mean <- rowMeans(bootstrap.x.clean)
# Bias
bias.x <- mean(bootstrap.x$mean) - mean(x)
bias.x.clean <- mean(bootstrap.x.clean$mean) - mean(x.clean)
cat("\nBias for x = ", bias.x, "\n")
cat("Bias for x.clean = ", bias.x.clean, "\n")
# Standard Error
cat("Standard Error for x = ", sd(bootstrap.x$mean), "\n")
cat("Standard Error for x.clean = ", sd(bootstrap.x.clean$mean), "\n")
# 95% CI
cat("95% CI for x = ", quantile(bootstrap.x$mean, c(0.025, 0.975)), "\n")
cat("95% CI for x.clean = ", quantile(bootstrap.x.clean$mean, c(0.025, 0.975)), "\n")
# bias corrected estimate
# non-trimmed
cat("Non-trimmed bias corrected estimate\n")
print(str(t(bootstrap.x)))
cat("x = ", mean(bootstrap.x) - bias.x, "\n")
cat("x.clean = ", mean(bootstrap.x.clean) - bias.x.clean, "\n")
# trimmed
cat("Trimmed bias corrected estimate\n")
cat("x = ", mean(bootstrap.x, trim = 0.05) - bias.x, "\n")
cat("x.clean = ", mean(bootstrap.x.clean, trim = 0.05) - bias.x.clean, "\n")
set.seed(1234)
bootstrap.x <- t(replicate(200, sample(x, replace=TRUE)))
set.seed(1234)
bootstrap.x.clean <- t(replicate(200, sample(x.clean, replace=TRUE)))
print(str(bootstrap.x))
# mean
bootstrap.x$mean <- rowMeans(bootstrap.x)
bootstrap.x.clean$mean <- rowMeans(bootstrap.x.clean)
print(str(bootstrap.x))
# Bias
bias.x <- mean(bootstrap.x$mean) - mean(x)
bias.x.clean <- mean(bootstrap.x.clean$mean) - mean(x.clean)
cat("\nBias for x = ", bias.x, "\n")
cat("Bias for x.clean = ", bias.x.clean, "\n")
print(str(bootstrap.x))
# Standard Error
cat("Standard Error for x = ", sd(bootstrap.x$mean), "\n")
cat("Standard Error for x.clean = ", sd(bootstrap.x.clean$mean), "\n")
print(str(bootstrap.x))
# 95% CI
cat("95% CI for x = ", quantile(bootstrap.x$mean, c(0.025, 0.975)), "\n")
cat("95% CI for x.clean = ", quantile(bootstrap.x.clean$mean, c(0.025, 0.975)), "\n")
# bias corrected estimate
# non-trimmed
cat("Non-trimmed bias corrected estimate\n")
print(str(bootstrap.x))
cat("x = ", mean(bootstrap.x) - bias.x, "\n")
cat("x.clean = ", mean(bootstrap.x.clean) - bias.x.clean, "\n")
# trimmed
cat("Trimmed bias corrected estimate\n")
cat("x = ", mean(bootstrap.x, trim = 0.05) - bias.x, "\n")
cat("x.clean = ", mean(bootstrap.x.clean, trim = 0.05) - bias.x.clean, "\n")
set.seed(1234)
bootstrap.x <- t(replicate(200, sample(x, replace=TRUE)))
set.seed(1234)
bootstrap.x.clean <- t(replicate(200, sample(x.clean, replace=TRUE)))
# mean
bootstrap.x.mean <- rowMeans(bootstrap.x)
bootstrap.x.clean.mean <- rowMeans(bootstrap.x.clean)
# Bias
bias.x <- mean(bootstrap.x.mean) - mean(x)
bias.x.clean <- mean(bootstrap.x.clean.mean) - mean(x.clean)
cat("\nBias for x = ", bias.x, "\n")
cat("Bias for x.clean = ", bias.x.clean, "\n")
# Standard Error
cat("Standard Error for x = ", sd(bootstrap.x.mean), "\n")
cat("Standard Error for x.clean = ", sd(bootstrap.x.clean.mean), "\n")
# 95% CI
cat("95% CI for x = ", quantile(bootstrap.x.mean, c(0.025, 0.975)), "\n")
cat("95% CI for x.clean = ", quantile(bootstrap.x.clean.mean, c(0.025, 0.975)), "\n")
# bias corrected estimate
# non-trimmed
cat("Non-trimmed bias corrected estimate\n")
cat("x = ", mean(bootstrap.x) - bias.x, "\n")
cat("x.clean = ", mean(bootstrap.x.clean) - bias.x.clean, "\n")
# trimmed
cat("Trimmed bias corrected estimate\n")
cat("x = ", mean(bootstrap.x, trim = 0.05) - bias.x, "\n")
cat("x.clean = ", mean(bootstrap.x.clean, trim = 0.05) - bias.x.clean, "\n")
set.seed(1234)
bootstrap.x <- t(replicate(200, sample(rnorm(2000, mean(x), sd(x)))))
set.seed(1234)
bootstrap.x.clean <- t(replicate(200, sample(rnorm(1960, mean(x.clean), sd(x.clean)))))
# mean
bootstrap.x.mean <- rowMeans(bootstrap.x)
bootstrap.x.clean.mean <- rowMeans(bootstrap.x.clean)
# Bias
bias.x <- mean(bootstrap.x.mean) - mean(x)
bias.x.clean <- mean(bootstrap.x.clean.mean) - mean(x.clean)
cat("\nBias for x = ", bias.x, "\n")
cat("Bias for x.clean = ", bias.x.clean, "\n")
# Standard Error
cat("Standard Error for x = ", sd(bootstrap.x.mean), "\n")
cat("Standard Error for x.clean = ", sd(bootstrap.x.clean.mean), "\n")
# 95% CI
cat("95% CI for x = ", quantile(bootstrap.x.mean, c(0.025, 0.975)), "\n")
cat("95% CI for x.clean = ", quantile(bootstrap.x.clean.mean, c(0.025, 0.975)), "\n")
# bias corrected estimate
# non-trimmed
cat("Non-trimmed bias corrected estimate\n")
cat("x = ", mean(bootstrap.x) - bias.x, "\n")
cat("x.clean = ", mean(bootstrap.x.clean) - bias.x.clean, "\n")
# trimmed
cat("Trimmed bias corrected estimate\n")
cat("x = ", mean(bootstrap.x, trim = 0.05) - bias.x, "\n")
cat("x.clean = ", mean(bootstrap.x.clean, trim = 0.05) - bias.x.clean, "\n")
install.packages(formatR)
install.packages("formatR")
formatR::tidy_source(width.cutoff = 50)
formatR::tidy_source(width.cutoff = 50)
formatR::tidy_source(width.cutoff = 50)
formatR::tidy_source(width.cutoff = 50)
formatR::tidy_source(width.cutoff = 50)
formatR::tidy_source(width.cutoff = 50)
formatR::tidy_source(width.cutoff = 50)
?tsboot
knitr::opts_chunk$set(fig.width = 10, fig.height = 6)
knitr::opts_chunk$set(echo = TRUE)
if (!require("pacman")) install.packages("pacman")
library(pacman)
pacman::p_load(boot)
data(lynx)
?tsboot
install.packages(c("ggmap", "magick", "transformr"))
install.packages(c("ggmap", "magick", "transformr"))
update.packages(ask = FALSE)
install.packages("ggplot2")
install.packages("gifski")
library(gifski)
library(readr)
library(dplyr)
library(rgdal)
library(ggplot2)
library(maps)
library(ggthemes)
library(gganimate)
library(hablar)
library(mapproj)
library(scales)
library(RColorBrewer)
library(ggmap)
library(transformr)
library(magick)
# set wd
setwd("C:/Projects/Personal/kosovo-covid-data/src")
# Load data
url_csv <- "../data/covid-komunat.csv"
ks_pop <- read_csv(url_csv)
# Set map
shapefile <- readOGR(dsn = path.expand("../data/kosovo-shapefile"),
"XK_EA_2018", use_iconv = TRUE, encoding = "UTF-8")
# Next the shapefile has to be converted to a dataframe for
# use in ggplot2
shapefile_df <- fortify(shapefile, name = "XK_NAME")
# Add id to ks_pop, right?
merged_df <- merge(shapefile_df, ks_pop, by = "id", all.x = TRUE)
final_df <- merged_df[order(merged_df$order), ]
# aggregate data to get mean latitude and mean longitude for
# each state
cnames <- aggregate(cbind(long, lat) ~ komuna, data = final_df,
FUN = function(x) mean(range(x)))
# new cpalette
#getPalette = colorRampPalette(brewer.pal(9, "Greens"))
# basic plot
ggplot() + geom_polygon(data = final_df[which(final_df$date == "2020-07-08"), ],
aes(x = long, y = lat, group = group, fill = new),
color = "black", size = 0.25) +
coord_map() +
labs(title = "Population in Kosovo in 1948") +
scale_fill_distiller(name = "Population", palette = "Greens",
direction = 1, breaks = pretty_breaks(n = 7), limits = c(min(final_df$new,
na.rm = TRUE), max(final_df$new, na.rm = TRUE))) +
theme_nothing(legend = TRUE) + geom_text(data = cnames, aes(long,
lat, label = komuna_me_e), size = 3, fontface = "bold")
install.packages(c("ggmap", "magick", "transformr"))
library(gifski)
library(readr)
library(dplyr)
library(rgdal)
library(ggplot2)
library(maps)
library(ggthemes)
library(gganimate)
library(hablar)
library(mapproj)
library(scales)
library(RColorBrewer)
library(ggmap)
library(transformr)
library(magick)
# set wd
setwd("C:/Projects/Personal/kosovo-population-animation/src/")
# Load data
url_csv <- "../data/population.csv"
ks_pop <- read_csv(url_csv)
ks_pop <- na.omit(ks_pop)
ks_pop <- ks_pop %>% convert(int(year))
# Set map
shapefile <- readOGR(dsn = path.expand("../data/kosovo-shapefile"),
"XK_EA_2018", use_iconv = TRUE, encoding = "UTF-8")
# Next the shapefile has to be converted to a dataframe for
# use in ggplot2
shapefile_df <- fortify(shapefile, name = "XK_NAME")
# Adding id to each row
id_map <- data.frame(id = c(0:39), komuna = shapefile$XK_NAME,
stringsAsFactors = FALSE)
write.csv(id_map, "id_map.csv")
# Add id to ks_pop, right?
merged_df <- merge(shapefile_df, ks_pop, by = "id", all.x = TRUE)
final_df <- merged_df[order(merged_df$order), ]
# aggregate data to get mean latitude and mean longitude for
# each state
cnames <- aggregate(cbind(long, lat) ~ komuna, data = final_df,
FUN = function(x) mean(range(x)))
# new cpalette
getPalette = colorRampPalette(brewer.pal(9, "Greens"))
# basic plot
ggplot() + geom_polygon(data = final_df[which(final_df$year ==
1948), ], aes(x = long, y = lat, group = group, fill = population),
color = "black", size = 0.25) + coord_map() + labs(title = "Population in Kosovo in 1948") +
scale_fill_distiller(name = "Population", palette = "Greens",
direction = 1, breaks = pretty_breaks(n = 7), limits = c(min(final_df$new,
na.rm = TRUE), max(final_df$new, na.rm = TRUE))) + geom_text(data = cnames, aes(long,
lat, label = komuna), size = 3, fontface = "bold")
library(gifski)
library(readr)
library(dplyr)
library(rgdal)
library(ggplot2)
library(maps)
library(ggthemes)
library(gganimate)
library(hablar)
library(mapproj)
library(scales)
library(RColorBrewer)
library(ggmap)
library(transformr)
library(magick)
# set wd
setwd("C:/Projects/Personal/kosovo-covid-data/src/")
# Load data
url_csv <- "../data/covid-komunat.csv"
ks_pop <- read_csv(url_csv)
# Set map
shapefile <- readOGR(dsn = path.expand("../data/kosovo-shapefile"),
"XK_EA_2018", use_iconv = TRUE, encoding = "UTF-8")
# Next the shapefile has to be converted to a dataframe for
# use in ggplot2
shapefile_df <- fortify(shapefile, name = "XK_NAME")
# Adding id to each row
id_map <- data.frame(id = c(0:39), komuna = shapefile$XK_NAME,
stringsAsFactors = FALSE)
write.csv(id_map, "id_map.csv")
# Add id to ks_pop, right?
merged_df <- merge(shapefile_df, ks_pop, by = "id", all.x = TRUE)
final_df <- merged_df[order(merged_df$order), ]
# aggregate data to get mean latitude and mean longitude for
# each state
cnames <- aggregate(cbind(long, lat) ~ komuna, data = final_df,
FUN = function(x) mean(range(x)))
# new cpalette
#getPalette = colorRampPalette(brewer.pal(9, "Greens"))
# basic plot
ggplot() + geom_polygon(data = final_df[which(final_df$date ==
"2020-07-08"), ], aes(x = long, y = lat, group = group, fill = population),
color = "black", size = 0.25) + coord_map() + labs(title = "Population in Kosovo in 1948") +
scale_fill_distiller(name = "Population", palette = "Greens",
direction = 1, breaks = pretty_breaks(n = 7), limits = c(min(final_df$new,
na.rm = TRUE), max(final_df$new, na.rm = TRUE))) + geom_text(data = cnames, aes(long,
lat, label = komuna), size = 3, fontface = "bold")
# basic plot
ggplot() + geom_polygon(data = final_df[which(final_df$date ==
"2020-07-08"), ], aes(x = long, y = lat, group = group, fill = new),
color = "black", size = 0.25) + coord_map() + labs(title = "Population in Kosovo in 1948") +
scale_fill_distiller(name = "Population", palette = "Greens",
direction = 1, breaks = pretty_breaks(n = 7), limits = c(min(final_df$new,
na.rm = TRUE), max(final_df$new, na.rm = TRUE))) + geom_text(data = cnames, aes(long,
lat, label = komuna), size = 3, fontface = "bold")
# basic plot
ggplot() + geom_polygon(data = final_df[which(final_df$date ==
"2020-07-08"), ], aes(x = long, y = lat, group = group, fill = new),
color = "black", size = 0.25) + coord_map() + labs(title = "Population in Kosovo in 1948") +
scale_fill_distiller(name = "Population", palette = "Greens",
direction = 1, breaks = pretty_breaks(n = 7), limits = c(min(final_df$new,
na.rm = TRUE), max(final_df$new, na.rm = TRUE))) + geom_text(data = cnames, aes(long,
lat, label = komuna), size = 3, fontface = "bold") + theme_nothing(legend = TRUE)
ggplot() + geom_polygon(data = final_df[which(final_df$date ==
"2020-07-08"), ], aes(x = long, y = lat, group = group, fill = new),
color = "black", size = 0.25) + coord_map() + labs(title = "Rastet e reja te COVID-19 ne Kosove") +
scale_fill_distiller(name = "Raste te reja", palette = "Reds",
direction = 1, breaks = pretty_breaks(n = 7), limits = c(min(final_df$new,
na.rm = TRUE), max(final_df$new, na.rm = TRUE))) + geom_text(data = cnames, aes(long,
lat, label = komuna), size = 3, fontface = "bold") + theme_nothing(legend = TRUE)
# basic plot
ggplot() + geom_polygon(data = final_df[which(final_df$date ==
"2020-07-08"), ], aes(x = long, y = lat, group = group, fill = new),
color = "black", size = 0.25) + coord_map() + labs(title = "Rastet e reja sipas komunave te COVID-19 ne Kosove") +
scale_fill_distiller(name = "Raste te reja", palette = "Reds",
direction = 1, breaks = pretty_breaks(n = 7), limits = c(min(final_df$new,
na.rm = TRUE), max(final_df$new, na.rm = TRUE))) + geom_text(data = cnames, aes(long,
lat, label = komuna), size = 3, fontface = "bold") + theme_nothing(legend = TRUE)
# basic plot
ggplot() + geom_polygon(data = final_df[which(final_df$date ==
"2020-07-08"), ], aes(x = long, y = lat, group = group, fill = new),
color = "black", size = 0.25) + coord_map() + labs(title = "Rastet e reja sipas komunave te COVID-19 ne Kosove",
caption = "Burimi: IKSHPK") +
scale_fill_distiller(name = "Raste te reja", palette = "Reds",
direction = 1, breaks = pretty_breaks(n = 7), limits = c(min(final_df$new,
na.rm = TRUE), max(final_df$new, na.rm = TRUE))) + geom_text(data = cnames, aes(long,
lat, label = komuna), size = 3, fontface = "bold") + theme_nothing(legend = TRUE) +
theme(axis.title = element_text(),
text = element_text(family = "Rubik"),
legend.text=element_text(size=10))
# basic plot
ggplot() + geom_polygon(data = final_df[which(final_df$date ==
"2020-07-08"), ], aes(x = long, y = lat, group = group, fill = new),
color = "black", size = 0.25) + coord_map() + labs(title = "Rastet e reja sipas komunave te COVID-19 ne Kosove",
caption = "Burimi: IKSHPK") +
scale_fill_distiller(name = "Raste te reja", palette = "Reds",
direction = 1, breaks = pretty_breaks(n = 7), limits = c(min(final_df$new,
na.rm = TRUE), max(final_df$new, na.rm = TRUE))) + geom_text(data = cnames, aes(long,
lat, label = komuna), size = 3, fontface = "bold") + theme_nothing(legend = TRUE, axis.title = element_text(),
text = element_text(family = "Rubik"),
legend.text=element_text(size=10))
# basic plot
ggplot() + geom_polygon(data = final_df[which(final_df$date ==
"2020-07-08"), ], aes(x = long, y = lat, group = group, fill = new),
color = "black", size = 0.25) + coord_map() + labs(title = "Rastet e reja sipas komunave te COVID-19 ne Kosove",
caption = "Burimi: IKSHPK") +
scale_fill_distiller(name = "Raste te reja", palette = "Reds",
direction = 1, breaks = pretty_breaks(n = 7), limits = c(min(final_df$new,
na.rm = TRUE), max(final_df$new, na.rm = TRUE))) + geom_text(data = cnames, aes(long,
lat, label = komuna), size = 3, fontface = "bold") + theme_nothing(legend = TRUE)
ggplot() + geom_polygon(data = final_df[which(final_df$date ==
"2020-07-08"), ], aes(x = long, y = lat, group = group, fill = new),
color = "black", size = 0.25) + coord_map() + labs(title = "Rastet e reja sipas komunave te COVID-19 ne Kosove",
caption = "Burimi: IKSHPK") +
scale_fill_distiller(name = "Raste te reja", palette = "Reds",
direction = 1, breaks = pretty_breaks(n = 7), limits = c(min(final_df$new,
na.rm = TRUE), max(final_df$new, na.rm = TRUE))) + geom_text(data = cnames, aes(long,
lat, label = komuna), size = 3, fontface = "bold") + theme_map(legend = TRUE)
# basic plot
ggplot() + geom_polygon(data = final_df[which(final_df$date ==
"2020-07-08"), ], aes(x = long, y = lat, group = group, fill = new),
color = "black", size = 0.25) + coord_map() + labs(title = "Rastet e reja sipas komunave te COVID-19 ne Kosove",
caption = "Burimi: IKSHPK") +
scale_fill_distiller(name = "Raste te reja", palette = "Reds",
direction = 1, breaks = pretty_breaks(n = 7), limits = c(min(final_df$new,
na.rm = TRUE), max(final_df$new, na.rm = TRUE))) + geom_text(data = cnames, aes(long,
lat, label = komuna), size = 3, fontface = "bold") + theme_map()
gg <- ggplot() + geom_polygon(data = final_df[which(final_df$date ==
"2020-07-08"), ], aes(x = long, y = lat, group = group, fill = new),
color = "black", size = 0.25) + coord_map() + labs(title = "Rastet e reja sipas komunave te COVID-19 ne Kosove",
caption = "Burimi: IKSHPK") +
scale_fill_distiller(name = "Raste te reja", palette = "Reds",
direction = 1, breaks = pretty_breaks(n = 7), limits = c(min(final_df$new,
na.rm = TRUE), max(final_df$new, na.rm = TRUE))) + geom_text(data = cnames, aes(long,
lat, label = komuna), size = 3, fontface = "bold") + theme_map() + theme(axis.title = element_text(),
text = element_text(family = "Rubik"),
legend.text=element_text(size=10))
gg
gg <- ggplot() + geom_polygon(data = final_df[which(final_df$date ==
"2020-07-08"), ], aes(x = long, y = lat, group = group, fill = new),
color = "black", size = 0.25) + coord_map() + labs(title = "Rastet e reja sipas komunave te COVID-19 ne Kosove",
caption = "Burimi: IKSHPK") +
scale_fill_distiller(name = "Raste te reja", palette = "Reds",
direction = 1, breaks = pretty_breaks(n = 7), limits = c(min(final_df$new,
na.rm = TRUE), max(final_df$new, na.rm = TRUE))) + geom_text(data = cnames, aes(long,
lat, label = komuna), size = 3, fontface = "bold") + theme_map()
gg
gg <- ggplot() + geom_polygon(data = final_df[which(final_df$date ==
"2020-07-08"), ], aes(x = long, y = lat, group = group, fill = new),
color = "black", size = 0.25) + coord_map() + labs(title = "Rastet e reja sipas komunave te COVID-19 ne Kosove",
caption = "Burimi: IKSHPK") +
scale_fill_distiller(name = "Raste te reja", palette = "Reds",
direction = 1, breaks = pretty_breaks(n = 7), limits = c(min(final_df$new,
na.rm = TRUE), max(final_df$new, na.rm = TRUE))) + geom_text(data = cnames, aes(long,
lat, label = komuna), size = 3, fontface = "bold") + theme_nothing(legend = TRUE)
gg
gg <- ggplot() + geom_polygon(data = final_df, aes(x = long, y = lat, group = group, fill = new),
color = "black", size = 0.25) + coord_map() + labs(title = "Rastet e reja te COVID-19 sipas komunave ne Kosove",
caption = "Burimi: IKSHPK") +
scale_fill_distiller(name = "Raste te reja", palette = "Reds",
direction = 1, breaks = pretty_breaks(n = 7), limits = c(min(final_df$new,
na.rm = TRUE), max(final_df$new, na.rm = TRUE))) + geom_text(data = cnames, aes(long,
lat, label = komuna), size = 3, fontface = "bold") + theme_nothing(legend = TRUE)
gg
gg
gg.animation = gg +
transition_time(date) +
labs(subtitle = "Data: {frame_time}")
gg.animation
gg <- ggplot() + geom_polygon(data = final_df, aes(x = long, y = lat, group = group, fill = new)) +
coord_map() +
theme_nothing(legend = TRUE) +
theme(plot.title = element_text(hjust =0.5))
gg
gg.animation = gg +
transition_time(date) +
labs(title = "Data: {frame_time}")
gg.animation
gg.animation = gg +
transition_states(
date,
transition_length = 2,
state_length = 1
) +
labs(title = "Data: {frame_time}")
gg.animation
